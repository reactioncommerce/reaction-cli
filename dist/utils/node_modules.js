'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateConfigWhenYarnUninstalled = updateConfigWhenYarnUninstalled;
exports.initInstallModules = initInstallModules;
exports.installModules = installModules;
exports.upgradeModules = upgradeModules;

var _shelljs = require('shelljs');

var _config = require('./config');

var Config = _interopRequireWildcard(_config);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _yarn_check = require('./yarn_check');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function updateConfigWhenYarnUninstalled() {
  if (Config.get('global', 'yarn') && !(0, _yarn_check.hasYarn)()) {
    Config.unset('global', 'yarn');
  }
}

function initInstallModules(dirName) {
  updateConfigWhenYarnUninstalled();
  var cmd = (0, _yarn_check.yarnOrNpm)();
  cmd += cmd === 'yarn' ? ' install --ignore-engines' : ' install';

  if ((0, _shelljs.exec)('cd ' + dirName + ' && meteor ' + cmd).code !== 0) {
    _logger2.default.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}

function installModules() {
  updateConfigWhenYarnUninstalled();
  var cmd = (0, _yarn_check.yarnOrNpm)();
  cmd += cmd === 'yarn' ? ' install --ignore-engines' : ' install';

  if ((0, _shelljs.exec)('meteor ' + cmd).code !== 0) {
    _logger2.default.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}

function upgradeModules() {
  updateConfigWhenYarnUninstalled();
  var cmd = (0, _yarn_check.yarnOrNpm)();
  cmd += cmd === 'yarn' ? ' upgrade --ignore-engines' : ' update';

  if ((0, _shelljs.exec)('meteor ' + cmd).code !== 0) {
    _logger2.default.error('\nError: Node modules were not successfully installed. Exiting.');
    process.exit(1);
  }
}